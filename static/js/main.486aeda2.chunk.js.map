{"version":3,"sources":["Components/SerchList-Item.js","Components/Serch-ListOption.js","Components/SearchListtitem.js","Components/Serch-List.js","App.js","serviceWorker.js","index.js"],"names":["SearchListItem","items","useState","item","setitem","useEffect","class","scope","ComponentTypeID","Counter","ComponentTypeName","LastChangedInVersion","FailureLocation","DegradationMechanism","DegradationInfluence","Graphics","DegradationProgression","FailureTiming","TimeCode","DiscoveryMethods","CommonDegradation","RelativeFrequency","Strength","DefColor","NewVulnerability","RepairTime","FailWeight","InstCol","DefFailWeight","TaskMetric","Attenuation","AddToList","SerchListOption","SelectedValue","pmbddata","onDisplay","userSelect","trim","console","log","displaybutton","setdisplaybutton","display","Setdisplay","UserSelectcheckbox","SetUserSelectcheckbox","UserSelectedSummit","SetUserSelectedSummit","UserSelectedCheckData","SetUserSelectedCheckData","Selecteddata","array","userdata","i","length","tmp","String","push","SelectedUserData","_","FailureOptionData","uniqdata","CreateSelectFailureLocation","onChange","useCallback","e","value","target","parentNode","children","innerText","onClick","map","index","key","className","type","size","color","Selectedarray","p","data","SelectedCheckboxUserView","name","id","for","SearchListitem","Index","SerchList","datas","pmbd","list","selected","setSelected","SearchListdisplay","setSearchListdisplay","text","require","App","ComponentNameData","ComponentNameDataCreate","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.486aeda2.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nconst SearchListItem = ({ items}) => {\r\n  const [item, setitem] = useState(items)\r\n\r\n  useEffect(\r\n    () => {\r\n      setitem(items)\r\n    },\r\n    [item]\r\n  )\r\n  \r\n\r\n  return (\r\n    <table class='table table-striped'>\r\n      <thead>\r\n        <tr>\r\n          <th scope='col'>ComponentTypeID</th>\r\n          <th scope='col'>Counter</th>\r\n          <th scope='col'>ComponentTypeName</th>\r\n          <th scope='col'>LastChangedInVersion</th>\r\n          <th scope='col'>Failure Location</th>\r\n\r\n          <th scope='col'>Degradation Mechanism</th>\r\n          <th scope='col'>Degradation Influence</th>\r\n\r\n          <th scope='col'>Graphics</th>\r\n          <th scope='col'>Degradation Progression</th>\r\n\r\n          <th scope='col'>Failure Timing</th>\r\n          <th scope='col'>Time Code</th>\r\n          <th scope='col'>Discovery Methods</th>\r\n\r\n          <th scope='col'>CommonDegradation</th>\r\n          <th scope='col'>RelativeFrequency</th>\r\n\r\n          <th scope='col'>Strength</th>\r\n          <th scope='col'>Def Color</th>\r\n          <th scope='col'>NewVulnerability</th>\r\n          <th scope='col'>Repair Time</th>\r\n          <th scope='col'>Fail Weight</th>\r\n          <th scope='col'>Inst Col</th>\r\n          <th scope='col'>Def Fail Weight</th>\r\n          <th scope='col'>Task Metric</th>\r\n          <th scope='col'>Attenuation</th>\r\n          <th scope='col'>AddToList</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {\r\n          <tr>\r\n            <th scope='row'>{item.ComponentTypeID}</th>\r\n            <td>{item.Counter}</td>\r\n            <td>{item.ComponentTypeName}}</td>\r\n\r\n            <td>{item.LastChangedInVersion}</td>\r\n            <td>{item.FailureLocation}</td>\r\n\r\n            <td>{item.DegradationMechanism}</td>\r\n            <td>{item.DegradationInfluence}</td>\r\n\r\n            <td>{item.Graphics}</td>\r\n            <td>{item.DegradationProgression}</td>\r\n\r\n            <td>{item.FailureTiming}</td>\r\n            <td>{item.TimeCode}</td>\r\n            <td>{item.DiscoveryMethods}</td>\r\n            <td>{item.CommonDegradation}</td>\r\n            <td>{item.RelativeFrequency}</td>\r\n\r\n            <td>{item.Strength}</td>\r\n            <td>{item.DefColor}</td>\r\n            <td>{item.NewVulnerability}</td>\r\n            <td>{item.RepairTime}</td>\r\n            <td>{item.FailWeight}</td>\r\n            <td>{item.InstCol}</td>\r\n            <td>{item.DefFailWeight}</td>\r\n            <td>{item.TaskMetric}</td>\r\n            <td>{item.Attenuation}</td>\r\n            <td>{item.AddToList}</td>\r\n          </tr>\r\n        }\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default SearchListItem\r\n","import React, { useState, useEffect, useCallback } from 'react'\r\nimport * as _ from 'lodash'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './SearchListOption.css'\r\nimport { MdSearch } from 'react-icons/md'\r\nimport SearchListItem from './SerchList-Item'\r\n\r\nconst CreateSelectFailureLocation = array => {\r\n  let tmp = []\r\n  let ComponentsName = []\r\n  for (let i = 0; i < array.length; i++) {\r\n    let uniqdata = array[i].FailureLocation.trim()\r\n    tmp.push(uniqdata)\r\n  }\r\n  ComponentsName = _.uniq(tmp)\r\n  return ComponentsName\r\n}\r\n\r\nconst SelectedUserData = (array, userSelect) => {\r\n  const userdata = []\r\n  for (let i = 0; i < array.length; i++) {\r\n    let tmp = new String(array[i].ComponentTypeName)\r\n    tmp = tmp.trim()\r\n    if (userSelect === tmp) {\r\n      userdata.push(array[i])\r\n    }\r\n  }\r\n  return userdata\r\n}\r\n\r\nconst SelectedCheckboxUserView = (Selectedarray, FailureOptionData) => {\r\n  let p = FailureOptionData\r\n  p = p.trim()\r\n  const array = []\r\n  for (let i = 0; i < Selectedarray.length; i++) {\r\n    let data = Selectedarray[i].FailureLocation\r\n    data = data.trim()\r\n    if (p == data) {\r\n      array.push(Selectedarray[i])\r\n    }\r\n  }\r\n  return array\r\n}\r\n\r\nconst SerchListOption = ({ SelectedValue, pmbddata, onDisplay }) => {\r\n  let userSelect = SelectedValue\r\n  userSelect = userSelect.trim()\r\n\r\n  console.log(userSelect)\r\n\r\n  // 선택한 컴포넌트name\r\n\r\n  const [displaybutton, setdisplaybutton] = useState(false)\r\n  const [display, Setdisplay] = useState(false)\r\n  const [UserSelectcheckbox, SetUserSelectcheckbox] = useState('')\r\n  const [UserSelectedSummit, SetUserSelectedSummit] = useState(false)\r\n  const [UserSelectedCheckData, SetUserSelectedCheckData] = useState([])\r\n\r\n  useEffect(\r\n    () => {\r\n      if (userSelect == 'default') {\r\n        Setdisplay(false)\r\n      } else {\r\n        Setdisplay(true)\r\n      }\r\n    },\r\n    [userSelect]\r\n  )\r\n\r\n  const totaldata = _.map(pmbddata)\r\n  const Selecteddata = SelectedUserData(totaldata, userSelect)\r\n  const FailureOptionData = CreateSelectFailureLocation(Selecteddata)\r\n  // FailureOptiondata를가짐\r\n\r\n  const onClick = () => {\r\n    Setdisplay(false)\r\n    setdisplaybutton(false)\r\n\r\n    const tmp = SelectedCheckboxUserView(Selecteddata, UserSelectcheckbox)\r\n\r\n    SetUserSelectedCheckData([...tmp])\r\n    SetUserSelectedSummit(true)\r\n  }\r\n\r\n  const onChange = useCallback(\r\n    e => {\r\n      const value = e.target.parentNode.children[1].innerText\r\n      setdisplaybutton(true)\r\n      SetUserSelectcheckbox(value)\r\n    },\r\n    [UserSelectcheckbox, displaybutton]\r\n  )\r\n\r\n  const onButtonClick = () => {\r\n    SetUserSelectedSummit(false)\r\n    Setdisplay(true)\r\n  }\r\n\r\n  const onComponentButtonClick = () => {\r\n    onDisplay()\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {UserSelectedSummit ? (\r\n        <button onClick={onButtonClick}>다른 FailureOption 데이터 보기</button>\r\n      ) : (\r\n        <></>\r\n      )}\r\n      {UserSelectedSummit ? (\r\n        <button onClick={onComponentButtonClick}>\r\n          다른 컴포넌트 데이터 보기\r\n        </button>\r\n      ) : (\r\n        <></>\r\n      )}\r\n\r\n      {UserSelectedSummit ? (\r\n        UserSelectedCheckData.map((value, index) => (\r\n          <SearchListItem key={index} items={value} />\r\n        ))\r\n      ) : (\r\n        <></>\r\n      )}\r\n      {display ? (\r\n        <div className='row'>\r\n          <div className='col'>\r\n            <span>\r\n              <strong className='Failure-title'>\r\n                Failure Location({SelectedValue})\r\n              </strong>\r\n            </span>\r\n\r\n            {displaybutton ? (\r\n              <button className='btn btn-default' type='button'>\r\n                <MdSearch size={50} color='gray' onClick={onClick} />\r\n              </button>\r\n            ) : (\r\n              <></>\r\n            )}\r\n            <div className='Failure-list'>\r\n              {FailureOptionData.map((value, index) => (\r\n                <div className='custom-control custom-radio'>\r\n                  <input\r\n                    type='radio'\r\n                    name='jb-radio'\r\n                    id={`jb-radio-${index}`}\r\n                    className='custom-control-input'\r\n                    onChange={onChange}\r\n                  />\r\n                  <label\r\n                    className='custom-control-label'\r\n                    for={`jb-radio-${index}`}\r\n                  >\r\n                    {value}\r\n                  </label>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SerchListOption\r\n","import React, { useState } from 'react'\r\n\r\nconst SearchListitem = ({ index, value }) => {\r\n  const [name, setname] = useState(value)\r\n  const [Index, setIndex] = useState(index)\r\n\r\n  return (\r\n    <option key={Index} value={Index}>\r\n      {name}\r\n    </option>\r\n  )\r\n}\r\n\r\nexport default SearchListitem\r\n","import React, { useState, useCallback, useEffect } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport * as _ from 'lodash'\r\nimport './SearchList.css'\r\nimport SerchListOption from './Serch-ListOption'\r\nimport SearchListitem from './SearchListtitem'\r\n\r\nconst SerchList = ({ datas, pmbd }) => {\r\n  const arr = _.map(datas)\r\n  const list = arr\r\n\r\n  const [selected, setSelected] = useState('default')\r\n  const [SearchListdisplay, setSearchListdisplay] = useState(true)\r\n\r\n  const onChange = useCallback(\r\n    e => {\r\n      const tmp = e.target[e.target.value].text\r\n      setSelected(tmp)\r\n      setSearchListdisplay(false)\r\n    },\r\n    [selected]\r\n  )\r\n\r\n  const onDisplay = () => {\r\n    setSearchListdisplay(true)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {SearchListdisplay ? (\r\n        <div className='input-group mb-3' id='serach-box'>\r\n          <div className='input-group-prepend'>\r\n            <label className='input-group-text' for='inputGroupSelect01'>\r\n              ComponentName\r\n            </label>\r\n          </div>\r\n          <select\r\n            className='custom-select'\r\n            id='inputGroupSelect01'\r\n            onChange={onChange}\r\n          >\r\n            {list.map((value, index) => (\r\n              <SearchListitem value={value} index={index} />\r\n            ))}\r\n          </select>\r\n        </div>\r\n      ) : (\r\n        <SerchListOption\r\n          SelectedValue={selected}\r\n          pmbddata={pmbd}\r\n          onDisplay={onDisplay}\r\n        />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SerchList\r\n","import React, { useState, useCallback } from 'react'\r\nimport * as _ from 'lodash'\r\n\r\nimport SerchList from './Components/Serch-List'\r\nimport './App.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\n// import data\r\n\r\nconst datas = require('./data/pmdb.json');\r\n\r\nconst ComponentNameDataCreate=(array)=>{\r\n  let tmp=[];\r\n  let ComponentsName = [];\r\n  for (let i = 0; i < array.length; i++) {\r\n    let uniqdata = array[i].ComponentTypeName.trim();\r\n   tmp.push(uniqdata);\r\n  }\r\n    ComponentsName=_.uniq(tmp);\r\n    return ComponentsName;\r\n}\r\n\r\n\r\n\r\nconst App = () => {\r\n\r\n  let ComponentNameData=useCallback(ComponentNameDataCreate(datas));\r\n  const [pmbd,setpmbd]=useState(datas);\r\n  \r\n\r\n\r\n  return (\r\n    <>\r\n      <header className='Web-title'>\r\n        <h1>PMBD Data 조회</h1>\r\n      </header>\r\n      <SerchList datas={ComponentNameData} pmbd={pmbd}/> \r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}